	public static void getDatamodellFromDatabase() // TODO return typ anpassen
	{
		conn = getInstance();

		if (conn != null) {
			// Anfrage-Statement erzeugen.
			Statement query;
			try {
				query = conn.createStatement();

				// Ergebnistabelle erzeugen und abholen.
				String sql = "SELECT customer_id, entity_pk_value, value "
						+ "FROM rating_option_vote "
						+ "ORDER BY customer_id, entity_pk_value, value";
				ResultSet result = query.executeQuery(sql);

				// Ergebnissaetze durchfahren.
				FastByIDMap<PreferenceArray> userData = new FastByIDMap<PreferenceArray>();
				List<Preference> userPrefs = new ArrayList<Preference>();
				long customerIdTemp = -1;
				long productIdTemp = -1;
				float ratingTemp = -1;
				long ratingCount = 0;
				while (result.next()) {
					// TODO Datenstruktur ergaenzen
					long customerId = result.getLong("customer_id");
					long productId = result.getLong("entity_pk_value");
					float rating = result.getFloat("value");

					System.out.println("Customer: " + customerId
							+ " rated product: " + productId + " with "
							+ rating + " stars"); // Test

					if (customerIdTemp == customerId
							&& productIdTemp == productId) {
						System.out.println("Duplicate found...");
						ratingTemp = ratingTemp + rating;
						ratingCount++;
					} else {
						if (ratingCount > 1) {
							ratingTemp = ratingTemp / ratingCount;
							System.out.println("The average rating out of "
									+ ratingCount + " votes of user: "
									+ customerIdTemp + " for product: "
									+ productIdTemp + " is " + ratingTemp
									+ " stars");
							ratingCount = -1;
//							userPrefs.add(new GenericPreference(customerIdTemp, productIdTemp, ratingTemp));
							System.out.println("adding user: " + customerIdTemp + " and item: " + productIdTemp);
						}
						if (customerIdTemp != customerId && customerIdTemp != -1) {
							// predictionArray dem datenmodell hinzufügen
//							userData.put
							System.out.println("User " + customerIdTemp + " complete");
						}
						// Datamodel auffüllen
						if(ratingCount <= 0){
							customerIdTemp = customerId;
							productIdTemp = productId;
							ratingTemp = rating;
							ratingCount++;
						}else {
						if(ratingCount == 1){
							System.out.println("adding user: " + customerIdTemp + "and item: " + productIdTemp);
							ratingCount = 0;
							customerIdTemp = customerId;
							productIdTemp = productId;
							ratingTemp = rating;
						}
						}
					}
				}
				// TODO Datenstruktur returnen
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}